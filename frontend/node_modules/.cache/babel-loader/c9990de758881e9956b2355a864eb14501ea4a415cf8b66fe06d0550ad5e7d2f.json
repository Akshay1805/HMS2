{"ast":null,"code":"var _jsxFileName = \"D:\\\\college\\\\HMS\\\\New folder\\\\hospital\\\\frontend\\\\src\\\\AppRoute.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Applink from \"./Applink\";\nimport DoctorLogin from \"../src/js/Pages/Login/DoctorLogin/DoctorLogin\";\nimport PatientLogin from \"../src/js/Pages/Login/PatientLogin/PatientLogin\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//import ProtectedRoute from './ProtectedRoute'; // Import the ProtectedRoute component\n\nfunction App() {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Your authentication logic should set isAuthenticated to true upon successful login\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Applink, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/doctor_login\",\n        element: /*#__PURE__*/_jsxDEV(DoctorLogin, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 46\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/patient_login\",\n        element: /*#__PURE__*/_jsxDEV(PatientLogin, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 47\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"BT2f1XiqCgFHwobQTWR7kond0Ig=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","BrowserRouter","Router","Routes","Route","Applink","DoctorLogin","PatientLogin","jsxDEV","_jsxDEV","App","_s","isAuthenticated","setIsAuthenticated","children","path","element","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/college/HMS/New folder/hospital/frontend/src/AppRoute.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport Applink from \"./Applink\";\r\nimport Doctor_dash from \"../src/js/Pages/doctor-dashboard/doctor-dashboard\";\r\nimport DoctorLogin from \"../src/js/Pages/Login/DoctorLogin/DoctorLogin\";\r\nimport PatientLogin from \"../src/js/Pages/Login/PatientLogin/PatientLogin\";\r\nimport Cookies from 'js-cookie';\r\n//import ProtectedRoute from './ProtectedRoute'; // Import the ProtectedRoute component\r\n\r\nfunction App() {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  \r\n  // Your authentication logic should set isAuthenticated to true upon successful login\r\n\r\n  return (\r\n    <Router>\r\n      <Routes>\r\n        <Route path='/' element={<Applink />} />\r\n        <Route path='/doctor_login' element={<DoctorLogin />} />\r\n        <Route path='/patient_login' element={<PatientLogin />} />\r\n        \r\n      </Routes>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AACzE,OAAOC,OAAO,MAAM,WAAW;AAE/B,OAAOC,WAAW,MAAM,+CAA+C;AACvE,OAAOC,YAAY,MAAM,iDAAiD;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3E;;AAEA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;;EAE7D;;EAEA,oBACES,OAAA,CAACP,MAAM;IAAAY,QAAA,eACLL,OAAA,CAACN,MAAM;MAAAW,QAAA,gBACLL,OAAA,CAACL,KAAK;QAACW,IAAI,EAAC,GAAG;QAACC,OAAO,eAAEP,OAAA,CAACJ,OAAO;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACxCX,OAAA,CAACL,KAAK;QAACW,IAAI,EAAC,eAAe;QAACC,OAAO,eAAEP,OAAA,CAACH,WAAW;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACxDX,OAAA,CAACL,KAAK;QAACW,IAAI,EAAC,gBAAgB;QAACC,OAAO,eAAEP,OAAA,CAACF,YAAY;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEpD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEb;AAACT,EAAA,CAfQD,GAAG;AAAAW,EAAA,GAAHX,GAAG;AAiBZ,eAAeA,GAAG;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}